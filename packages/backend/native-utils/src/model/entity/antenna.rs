//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use super::{newtype, sea_orm_active_enums::AntennaSrcEnum};
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Default)]
#[sea_orm(table_name = "antenna")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTimeWithTimeZone,
    #[sea_orm(column_name = "userId")]
    pub user_id: String,
    pub name: String,
    pub src: AntennaSrcEnum,
    #[sea_orm(column_name = "userListId")]
    pub user_list_id: Option<String>,
    #[sea_orm(column_type = "JsonBinary")]
    pub keywords: newtype::JsonKeyword,
    #[sea_orm(column_name = "withFile")]
    pub with_file: bool,
    pub expression: Option<String>,
    pub notify: bool,
    #[sea_orm(column_name = "caseSensitive")]
    pub case_sensitive: bool,
    #[sea_orm(column_name = "withReplies")]
    pub with_replies: bool,
    #[sea_orm(column_name = "userGroupJoiningId")]
    pub user_group_joining_id: Option<String>,
    pub users: newtype::StringVec,
    #[sea_orm(column_name = "excludeKeywords", column_type = "JsonBinary")]
    pub exclude_keywords: newtype::JsonKeyword,
    #[sea_orm(column_type = "JsonBinary")]
    pub instances: newtype::JsonStringVec,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
    #[sea_orm(
        belongs_to = "super::user_group_joining::Entity",
        from = "Column::UserGroupJoiningId",
        to = "super::user_group_joining::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    UserGroupJoining,
    #[sea_orm(
        belongs_to = "super::user_list::Entity",
        from = "Column::UserListId",
        to = "super::user_list::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    UserList,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::user_group_joining::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserGroupJoining.def()
    }
}

impl Related<super::user_list::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserList.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
