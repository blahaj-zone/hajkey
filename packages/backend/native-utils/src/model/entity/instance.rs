//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Default)]
#[sea_orm(table_name = "instance")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(column_name = "caughtAt")]
    pub caught_at: DateTimeWithTimeZone,
    pub host: String,
    #[sea_orm(column_name = "usersCount")]
    pub users_count: i32,
    #[sea_orm(column_name = "notesCount")]
    pub notes_count: i32,
    #[sea_orm(column_name = "followingCount")]
    pub following_count: i32,
    #[sea_orm(column_name = "followersCount")]
    pub followers_count: i32,
    #[sea_orm(column_name = "latestRequestSentAt")]
    pub latest_request_sent_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_name = "latestStatus")]
    pub latest_status: Option<i32>,
    #[sea_orm(column_name = "latestRequestReceivedAt")]
    pub latest_request_received_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_name = "lastCommunicatedAt")]
    pub last_communicated_at: DateTimeWithTimeZone,
    #[sea_orm(column_name = "isNotResponding")]
    pub is_not_responding: bool,
    #[sea_orm(column_name = "softwareName")]
    pub software_name: Option<String>,
    #[sea_orm(column_name = "softwareVersion")]
    pub software_version: Option<String>,
    #[sea_orm(column_name = "openRegistrations")]
    pub open_registrations: Option<bool>,
    pub name: Option<String>,
    pub description: Option<String>,
    #[sea_orm(column_name = "maintainerName")]
    pub maintainer_name: Option<String>,
    #[sea_orm(column_name = "maintainerEmail")]
    pub maintainer_email: Option<String>,
    #[sea_orm(column_name = "infoUpdatedAt")]
    pub info_updated_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_name = "isSuspended")]
    pub is_suspended: bool,
    #[sea_orm(column_name = "iconUrl")]
    pub icon_url: Option<String>,
    #[sea_orm(column_name = "themeColor")]
    pub theme_color: Option<String>,
    #[sea_orm(column_name = "faviconUrl")]
    pub favicon_url: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
